#!/usr/bin/env bash

# gh-crab-comments: Fetch unresolved CodeRabbit comments from GitHub PRs
# Usage: Run from within a git repository with an associated PR
# Exit codes: 0 (success), 1 (user error), 2 (system error)

set -e          # Exit on error
set -u          # Exit on undefined variable
set -o pipefail # Exit on pipe failure

# Global variables
TEMP_FILE=""
OWNER=""
REPO=""
PR_NUMBER=""
OUTPUT_FILE=""
MAX_PAGES=100

# GraphQL query for fetching review threads
GRAPHQL_QUERY='query($owner: String!, $repo: String!, $number: Int!, $cursor: String) {
  repository(owner: $owner, name: $repo) {
    pullRequest(number: $number) {
      reviewThreads(first: 100, after: $cursor) {
        pageInfo {
          hasNextPage
          endCursor
        }
        nodes {
          isResolved
          comments(first: 100) {
            nodes {
              id
              author {
                login
              }
              bodyText
              createdAt
              path
            }
          }
        }
      }
    }
  }
}'

# Cleanup function - removes temporary files
cleanup() {
  if [ -n "$TEMP_FILE" ] && [ -f "$TEMP_FILE" ]; then
    rm -f "$TEMP_FILE"
  fi
}

# Register cleanup on exit, interrupt, and terminate signals
trap cleanup EXIT INT TERM

# Check required dependencies
check_dependencies() {
  local missing_deps=()

  if ! command -v gh >/dev/null 2>&1; then
    missing_deps+=("gh CLI")
  fi

  if ! command -v jq >/dev/null 2>&1; then
    missing_deps+=("jq")
  fi

  if ! command -v git >/dev/null 2>&1; then
    missing_deps+=("git")
  fi

  if [ ${#missing_deps[@]} -gt 0 ]; then
    echo "❌ Missing required dependencies: ${missing_deps[*]}"
    echo ""
    echo "Please install:"
    for dep in "${missing_deps[@]}"; do
      case $dep in
        "gh CLI")
          echo "  - gh CLI: brew install gh"
          ;;
        "jq")
          echo "  - jq: brew install jq"
          ;;
        "git")
          echo "  - git: should be pre-installed on macOS"
          ;;
      esac
    done
    exit 2
  fi
}

# Detect repository context (owner, name, branch)
detect_repository_context() {
  # Check if in git repository
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "❌ Must be run inside a git repository"
    exit 1
  fi

  # Extract repository owner
  OWNER=$(gh repo view --json owner -q .owner.login 2>/dev/null) || {
    echo "❌ Failed to detect repository owner"
    echo "Make sure you're in a valid git repository with a remote"
    exit 1
  }

  # Extract repository name
  REPO=$(gh repo view --json name -q .name 2>/dev/null) || {
    echo "❌ Failed to detect repository name"
    exit 1
  }

  # Validate owner name (GitHub username pattern)
  if ! [[ "$OWNER" =~ ^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?$ ]]; then
    echo "❌ Invalid repository owner: $OWNER"
    exit 1
  fi

  # Validate repo name
  if ! [[ "$REPO" =~ ^[a-zA-Z0-9._-]+$ ]]; then
    echo "❌ Invalid repository name: $REPO"
    exit 1
  fi

  # Get current branch
  local current_branch
  current_branch=$(git branch --show-current)

  if [ -z "$current_branch" ]; then
    echo "❌ Could not determine current branch"
    exit 1
  fi
}

# Detect PR number for current branch
detect_pr_number() {
  # Check GitHub authentication
  if ! gh auth status >/dev/null 2>&1; then
    echo "❌ GitHub authentication required"
    echo "Run: gh auth login"
    exit 1
  fi

  # Get PR number for current branch
  PR_NUMBER=$(gh pr view --json number -q .number 2>/dev/null)

  if [ -z "$PR_NUMBER" ]; then
    echo "❌ No PR found for current branch"
    exit 1
  fi

  # Validate PR number is a positive integer
  if ! [[ "$PR_NUMBER" =~ ^[0-9]+$ ]] || [ "$PR_NUMBER" -le 0 ]; then
    echo "❌ Invalid PR number: $PR_NUMBER"
    exit 1
  fi
}

# Fetch review threads with pagination
fetch_review_threads() {
  local cursor="null"
  local page_count=0
  local all_threads=""

  # Create temp file for responses
  TEMP_FILE=$(mktemp)

  echo "🔍 Fetching unresolved CodeRabbit comments from PR #$PR_NUMBER..."

  while [ "$page_count" -lt "$MAX_PAGES" ]; do
    local response

    # Make GraphQL request
    if [ "$cursor" = "null" ]; then
      # First request without cursor
      response=$(gh api graphql \
        -f query="$GRAPHQL_QUERY" \
        -f owner="$OWNER" \
        -f repo="$REPO" \
        -F number="$PR_NUMBER" 2>&1) || {
        handle_api_error "$response"
      }
    else
      # Subsequent requests with cursor
      response=$(gh api graphql \
        -f query="$GRAPHQL_QUERY" \
        -f owner="$OWNER" \
        -f repo="$REPO" \
        -F number="$PR_NUMBER" \
        -f cursor="$cursor" 2>&1) || {
        handle_api_error "$response"
      }
    fi

    # Check for errors in response
    if echo "$response" | jq -e '.errors' >/dev/null 2>&1; then
      handle_graphql_errors "$response"
    fi

    # Append threads to all_threads
    echo "$response" >> "$TEMP_FILE"

    # Check if more pages exist
    local has_next
    has_next=$(echo "$response" | jq -r '.data.repository.pullRequest.reviewThreads.pageInfo.hasNextPage // "false"')

    if [ "$has_next" != "true" ]; then
      break
    fi

    # Get next cursor
    cursor=$(echo "$response" | jq -r '.data.repository.pullRequest.reviewThreads.pageInfo.endCursor // "null"')

    if [ "$cursor" = "null" ]; then
      break
    fi

    page_count=$((page_count + 1))
  done

  # Warn if we hit max pages
  if [ "$page_count" -ge "$MAX_PAGES" ]; then
    echo "⚠️  Warning: Reached maximum page limit ($MAX_PAGES pages)" >&2
  fi
}

# Handle API errors
handle_api_error() {
  local error_msg="$1"

  echo "❌ GitHub API error: $error_msg" >&2
  exit 2
}

# Handle GraphQL errors in response
handle_graphql_errors() {
  local response="$1"

  # Check for rate limiting
  if echo "$response" | jq -e '.errors[]? | select(.type=="RATE_LIMITED")' >/dev/null 2>&1; then
    local reset_time
    reset_time=$(echo "$response" | jq -r '.errors[0].extensions.resetAt // "unknown"')
    echo "❌ GitHub API rate limit exceeded" >&2
    echo "Rate limit resets at: $reset_time" >&2
    exit 2
  fi

  # Check for not found
  if echo "$response" | jq -e '.errors[]? | select(.type=="NOT_FOUND")' >/dev/null 2>&1; then
    echo "❌ Repository or PR not found" >&2
    echo "Verify that $OWNER/$REPO PR #$PR_NUMBER exists" >&2
    exit 1
  fi

  # Generic error
  local error_message
  error_message=$(echo "$response" | jq -r '.errors[0].message // "Unknown error"')
  echo "❌ GraphQL error: $error_message" >&2
  exit 2
}

# Main function
main() {
  # Check dependencies first
  check_dependencies

  # Detect repository context
  detect_repository_context

  # Detect PR number
  detect_pr_number

  # Fetch review threads
  fetch_review_threads

  echo ""
  echo "✅ Fetching complete"
}

# Run main function
main "$@"
